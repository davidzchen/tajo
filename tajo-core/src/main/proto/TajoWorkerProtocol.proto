/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// TajoMaster -> TajoWorker, TajoWorker(QueryMaster) <-> TajoWorker Protocol
option java_package = "org.apache.tajo.ipc";
option java_outer_classname = "TajoWorkerProtocol";
option java_generic_services = true;
option java_generate_equals_and_hash = true;

import "yarn_protos.proto";
import "tajo_protos.proto";
import "TajoIdProtos.proto";
import "CatalogProtos.proto";
import "PrimitiveProtos.proto";
import "Plan.proto";
import "ContainerProtocol.proto";

package hadoop.yarn;

message SessionProto {
  required string session_id = 1;
  required string username = 2;
  required string current_database = 3;
  required int64 last_access_time = 4;
  required KeyValueSetProto variables = 5;
}

message TaskStatusProto {
  required TaskAttemptIdProto id = 1;
  required string worker_name = 2;
  required float progress = 3;
  required TaskAttemptState state = 4;
  optional StatSetProto stats = 5;
  optional TableStatsProto input_stats = 6;
  optional TableStatsProto result_stats = 7;
  repeated ShuffleFileOutput shuffle_file_outputs = 8;
}

message TaskCompletionReport {
  required TaskAttemptIdProto id = 1;
  optional StatSetProto stats = 2;
  optional TableStatsProto input_stats = 3;
  optional TableStatsProto result_stats = 4;
  repeated ShuffleFileOutput shuffle_file_outputs = 5;
}

message TaskFatalErrorReport {
  required TaskAttemptIdProto id = 1;
  optional string error_message = 2;
  optional string error_trace = 3;
}

message TaskRequestProto {
  required TaskAttemptIdProto id = 1;
  repeated FragmentProto fragments = 2;
  required string output_table = 3;
  required bool clustered_output = 4;
  required LogicalNodeTree plan = 5;
  optional bool inter_query = 6 [default = false];
  repeated FetchProto fetches = 7;
  optional bool should_die = 8;
  optional KeyValueSetProto query_context = 9;
  optional DataChannelProto data_channel = 10;
  optional EnforcerProto enforcer = 11;
}

message FetchProto {
  required string host = 1;
  required int32 port = 2;
  required ShuffleType type = 3;
  required ExecutionBlockIdProto execution_block_id = 4;
  required int32 partition_id = 5;
  required string name = 6;
  optional string range_params = 7;
  optional bool has_next = 8 [default = false];

  // repeated part
  repeated int32 task_id = 9 [packed=true];
  repeated int32 attempt_id = 10 [packed=true];

  optional int64 offset = 11;
  optional int64 length = 12;
}

message FailureIntermediateProto {
  required int64 page_pos = 1;
  required int32 start_row_num = 2;
  required int32 end_row_num = 3;
}

message IntermediateEntryProto {
  message PageProto {
    required int64 pos = 1;
    required int32 length = 2;
  }
  required ExecutionBlockIdProto eb_id = 1;
  required int32 task_id = 2;
  required int32 attempt_id = 3;
  required int32 part_id = 4;
  required string host = 5;
  required int64 volume = 6;
  repeated PageProto pages = 7;
  repeated FailureIntermediateProto failures = 8;
}

message ExecutionBlockReport {
  required ExecutionBlockIdProto eb_id = 1;
  required bool report_success = 2;
  optional string report_error_message = 3;
  required int32 succeeded_tasks = 4;
  repeated IntermediateEntryProto intermediate_entries = 5;
}

message TaskResponseProto {
  required string id = 1;
  required QueryState status = 2;
}

message StatusReportProto {
  required int64 timestamp = 1;
  required string server_name = 2;
  repeated TaskStatusProto status = 3;
  repeated TaskAttemptIdProto pings = 4;
}

message CommandRequestProto {
  repeated Command command = 1;
}

message CommandResponseProto {
}

message Command {
  required TaskAttemptIdProto id = 1;
  required CommandType type = 2;
}

enum CommandType {
  PREPARE = 0;
  LAUNCH = 1;
  STOP = 2;
  FINALIZE = 3;
}

message ShuffleFileOutput {
  required int32 part_id = 1;
  optional string file_name = 2;
  optional int64 volume = 3;
}

message QueryExecutionRequestProto {
  required QueryIdProto query_id = 1;
  required SessionProto session = 2;
  required KeyValueSetProto query_context = 3;
  required StringProto expr_in_json = 5;
  optional StringProto logical_plan_json = 6;
}

message GetTaskRequestProto {
  required int32 worker_id = 1;
  required TajoContainerIdProto container_id = 2;
  required ExecutionBlockIdProto execution_block_id = 3;
}

message DataChannelProto {
  required ExecutionBlockIdProto src_id = 1;
  required ExecutionBlockIdProto target_id = 2;

  required TransmitType transmit_type = 3 [default = PULL_TRANSMIT];
  required ShuffleType shuffle_type = 4;

  optional SchemaProto schema = 5;

  repeated ColumnProto shuffle_keys = 7;
  optional int32 num_outputs = 9 [default = 1];

  optional StoreType store_type = 10 [default = CSV];
}

message RunExecutionBlockRequestProto {
  required ExecutionBlockIdProto execution_block_id = 1;
  required WorkerConnectionInfoProto query_master = 2;
  required string node_id = 3;
  required string container_id = 4;
  optional string query_output_path = 5;

  required KeyValueSetProto query_context = 6;
  required string plan_json = 7;
}

message ExecutionBlockListProto {
  repeated ExecutionBlockIdProto execution_block_id = 1;
}

service TajoWorkerProtocolService {
  rpc ping (TaskAttemptIdProto) returns (BoolProto);

  // from QueryMaster(Worker)
  rpc startExecutionBlock(RunExecutionBlockRequestProto) returns (BoolProto);
  rpc stopExecutionBlock(ExecutionBlockIdProto) returns (BoolProto);
  rpc killTaskAttempt(TaskAttemptIdProto) returns (BoolProto);
  rpc cleanup(QueryIdProto) returns (BoolProto);
  rpc cleanupExecutionBlocks(ExecutionBlockListProto) returns (BoolProto);
}

message EnforceProperty {
  enum EnforceType {
    SORTED_INPUT = 0;
    OUTPUT_DISTINCT = 1;
    GROUP_BY = 2;
    JOIN = 3;
    SORT = 4;
    BROADCAST = 5;
    COLUMN_PARTITION = 6;
    DISTINCT_GROUP_BY = 7;
  }

  // Identifies which field is filled in.
  required EnforceType type = 1;

  // One of the following will be filled in.
  optional SortedInputEnforce sorted_input = 2;
  optional OutputDistinctEnforce output_distinct = 3;
  optional GroupbyEnforce groupby = 4;
  optional JoinEnforce join = 5;
  optional SortEnforce sort = 6;
  optional BroadcastEnforce broadcast = 7;
  optional ColumnPartitionEnforcer column_partition = 8;
  optional DistinctGroupbyEnforcer distinct = 9;
}

message SortedInputEnforce {
  required string table_name = 1;
  repeated SortSpecProto sort_specs = 2;
}

message OutputDistinctEnforce {
}

message JoinEnforce {
  enum JoinAlgorithm {
    NESTED_LOOP_JOIN = 0;
    BLOCK_NESTED_LOOP_JOIN = 1;
    IN_MEMORY_HASH_JOIN = 2;
    HYBRID_HASH_JOIN = 3;
    MERGE_JOIN = 4;
  }

  required int32 node_id = 1;
  required JoinAlgorithm algorithm = 2;
}

message GroupbyEnforce {
  enum GroupbyAlgorithm {
    HASH_AGGREGATION = 0;
    SORT_AGGREGATION = 1;
  }

  required int32 node_id = 1;
  required GroupbyAlgorithm algorithm = 2;
  repeated SortSpecProto sort_specs = 3;
}

message SortEnforce {
  enum SortAlgorithm {
    IN_MEMORY_SORT = 0;
    MERGE_SORT = 1;
  }

  required int32 node_id = 1;
  required SortAlgorithm algorithm = 2;
}

message BroadcastEnforce {
  required string table_name = 1;
}

message ColumnPartitionEnforcer {
  enum ColumnPartitionAlgorithm {
    HASH_PARTITION = 0;
    SORT_PARTITION = 1;
  }

  required int32 node_id = 1;
  required ColumnPartitionAlgorithm algorithm = 2;
}

message DistinctGroupbyEnforcer {
  enum DistinctAggregationAlgorithm {
    HASH_AGGREGATION = 0;
    SORT_AGGREGATION = 1;
  }

  enum MultipleAggregationStage {
    FIRST_STAGE = 0;
    SECOND_STAGE = 1;
    THRID_STAGE = 3;
  }

  message SortSpecArray {
    required int32 node_id = 1;
    repeated SortSpecProto sort_specs = 2;
  }
  required int32 node_id = 1;
  required DistinctAggregationAlgorithm algorithm = 2;
  repeated SortSpecArray sort_spec_arrays = 3;
  required bool is_multiple_aggregation = 4 [default = false];
  optional MultipleAggregationStage multiple_aggregation_stage = 5;
}

message EnforcerProto {
  repeated EnforceProperty properties = 1;
}

message FetcherHistoryProto {
  required int64 start_time = 1;
  optional int64 finish_time = 2;
  required FetcherState state = 3;
  required int64 file_length = 4;
  required int32 message_received_count = 5;
}

message TaskHistoryProto {
  required TaskAttemptIdProto task_attempt_id = 1;
  required TaskAttemptState state = 2;
  required float progress = 3;
  required int64 start_time = 4;
  required int64 finish_time = 5;
  required TableStatsProto input_stats = 6;
  optional TableStatsProto output_stats = 7;
  optional string output_path = 8;
  optional string working_path = 9;
  optional int32 finished_fetch_count = 10;
  optional int32 total_fetch_count = 11;
  repeated FetcherHistoryProto fetcher_histories = 12;
}

message TaskRunnerHistoryProto {
  required ExecutionBlockIdProto execution_block_id = 1;
  required string state = 2;
  required string container_id = 3;
  optional int64 start_time = 4;
  optional int64 finish_time = 5;
  repeated TaskHistoryProto task_histories = 6;
}
