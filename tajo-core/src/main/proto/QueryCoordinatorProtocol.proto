/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//TajoWorker -> TajoMaster protocol

option java_package = "org.apache.tajo.ipc";
option java_outer_classname = "QueryCoordinatorProtocol";
option java_generic_services = true;
option java_generate_equals_and_hash = true;

import "yarn_protos.proto";
import "tajo_protos.proto";
import "TajoIdProtos.proto";
import "CatalogProtos.proto";
import "PrimitiveProtos.proto";
import "ContainerProtocol.proto";

package hadoop.yarn;

message ServerStatusProto {
  message System {
    required int32 available_processors = 1;
    required int32 free_memory_mb = 2;
    required int32 max_memory_mb = 3;
    required int32 total_memory_mb = 4;
  }
  message Disk {
    required string absolute_path = 1;
    required int64 total_space = 2;
    required int64 free_space = 3;
    required int64 usable_space = 4;
  }

  message JvmHeap {
    required int64 max_heap = 1;
    required int64 total_heap = 2;
    required int64 free_heap = 3;
  }

  required System system = 1;
  required float disk_slots = 2;
  required int32 memory_resource_mb = 3;
  repeated Disk disk = 4;
  required int32 running_task_num = 5;
  required JvmHeap jvm_heap = 6;
  required BoolProto query_master_mode = 7;
  required BoolProto task_runner_mode = 8;
}

message TajoHeartbeat {
  required WorkerConnectionInfoProto connection_info = 1;
  optional QueryIdProto query_id = 2;
  optional QueryState state = 3;
  optional TableDescProto result_desc = 4;
  optional string status_message = 5;
  optional float query_progress = 6;
}

message TajoHeartbeatResponse {
  message ResponseCommand {
    required string command = 1;
    repeated string params = 2;
  }
  required BoolProto heartbeat_result = 1;
  required ClusterResourceSummary cluster_resource_summary = 2;
  optional ResponseCommand response_command = 3;
}

message ClusterResourceSummary {
  required int32 num_workers = 1;
  required int32 total_disk_slots = 2;
  required int32 total_cpu_core_slots = 3;
  required int32 total_memory_mb = 4;

  required int32 total_available_disk_slots = 5;
  required int32 total_available_cpu_core_slots = 6;
  required int32 total_available_memory_mb = 7;
}

enum ResourceRequestPriority {
  MEMORY = 1;
  DISK = 2;
}

message WorkerResourceAllocationRequest {
  required QueryIdProto query_id = 1;
  required ResourceRequestPriority resource_request_priority = 2;

  required int32 num_containers = 3;

  required int32 max_memory_mb_per_container = 4;
  required int32 min_memory_mb_per_container = 5;

  required float max_disk_slot_per_container = 6;
  required float min_disk_slot_per_container = 7;
}

message WorkerResourceProto {
  required WorkerConnectionInfoProto connection_info = 1;
  required int32 memory_mb = 2 ;
  required float disk_slots = 3;
}

message WorkerResourcesRequest {
  repeated WorkerResourceProto worker_resources = 1;
}

message WorkerResourceReleaseRequest {
  required ExecutionBlockIdProto execution_block_id = 1;
  repeated TajoContainerIdProto container_ids = 2;
}

message WorkerAllocatedResource {
  required TajoContainerIdProto container_id = 1;
  required WorkerConnectionInfoProto connection_info = 2;

  required int32 allocated_memory_mb = 3;
  required float allocated_disk_slots = 4;
}

message WorkerResourceAllocationResponse {
  required QueryIdProto query_id = 1;
  repeated WorkerAllocatedResource worker_allocated_resource = 2;
}

service QueryCoordinatorProtocolService {
  rpc heartbeat(TajoHeartbeat) returns (TajoHeartbeatResponse);
  rpc allocateWorkerResources(WorkerResourceAllocationRequest)
      returns (WorkerResourceAllocationResponse);
  rpc releaseWorkerResource(WorkerResourceReleaseRequest) returns (BoolProto);
  rpc getAllWorkerResource(NullProto) returns (WorkerResourcesRequest);
}
